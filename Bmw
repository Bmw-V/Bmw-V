local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
   Name = "Bmw v1",
   Icon = 1, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Bmw v1 Premium",
   LoadingSubtitle = "by Palawan",
   Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Palawan"
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Bmw v1",
      Subtitle = "Key system",
      Note = "Premium script", -- Use this to tell the user how to get a key
      FileName = "Key system", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = nil, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Palawan"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Tab = Window:CreateTab("Movement", 4483362458) -- Title, Image

local Slider = Tab:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 100},
   Increment = 10,
   Suffix = "speed",
   CurrentValue = 16,
   Flag = "Slider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Jump height",
   Range = {0, 250},
   Increment = 10,
   Suffix = "jump",
   CurrentValue = 50,
   Flag = "Slider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
   end,
})

local Button = Tab:CreateButton({
   Name = "inf jump",
   Callback = function()
   InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
   end,
})

Rayfield:Notify({
   Title = "",
   Content = "Loaded",
   Duration = 6.5,
   Image = 4483362458,
})
